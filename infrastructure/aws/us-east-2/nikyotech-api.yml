AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: api.nikyotech.com
      ValidationMethod: DNS

  ApiHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # AccessLogSettings:
      #   DestinationArn: !ImportValue AccountApiGatewayLogGroupArn
      #   # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html
      #   Format: '$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId $context.extendedRequestId'
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - '*'
        AllowMethods:
          - POST
        AllowOrigins:
          - https://nikyotech.com
          - https://www.nikyotech.com
      Domain:
        CertificateArn: !Ref ApiCertificate
        DomainName: api.nikyotech.com
        # Route53:
        #   HostedZoneId: !ImportValue HostedZoneId

  EmailFunction:
    Type: AWS::Serverless::Function
    # Metadata:
    #   BuildMethod: dotnet7
    Properties:
      Architectures:
        - x86_64
      Events:
        EmailPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiHttpApi
            Method: POST
            Path: /email
      FunctionName: nikyotech-email
      Handler: index.handler
      InlineCode: |
        const { SESClient, SendEmailCommand } = require("@aws-sdk/client-ses");
        const client = new SESClient({ region: "us-east-2" }); // replace "us-east-1" with your AWS Region

        const RECAPTCHA_SECRET_KEY = process.env.RECAPTCHA_SECRET_KEY;

        const verifyRecaptcha = async (token) => {
          const response = await fetch(`https://www.google.com/recaptcha/api/siteverify`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: `secret=${RECAPTCHA_SECRET_KEY}&response=${token}`,
          });

          return response.json();
        };

        exports.handler = async function(event, context, callback) {
          const data = JSON.parse(event.body);
          
          if (!data.token) {
            // https://docs.aws.amazon.com/apigateway/latest/developerguide/handle-errors-in-lambda-integration.html 
            const error = {
              errorType : "BadRequest",
              httpStatus : 400,
              requestId : context.awsRequestId
            }

            callback(JSON.stringify(error));
            return;
          }

          const recaptchaResponse = await verifyRecaptcha(data.token);

          if (!recaptchaResponse.success) {
            const error = {
              errorType : "Unauthorized",
              httpStatus : 401,
              requestId : context.awsRequestId
            }

            callback(JSON.stringify(error));
            return;
          }

          const input = { // SendEmailRequest
            Source: "request@nikyotech.com", // required
            Destination: {
              ToAddresses: [
                "nikki.yodo@nikyotech.com",
              ]
            },
            Message: {
              Subject: {
                Data: "Request", // required
                Charset: "UTF-8",
              },
              Body: {
                Text: {
                  Data: `First Name: ${data.firstName}. Last Name: ${data.lastName}. Email: ${data.email}. Phone: ${data.phone}. Company: ${data.company}. Project: ${data.project}.`, // required
                  Charset: "UTF-8",
                },
                Html: {
                  Data: `<p>First Name: ${data.firstName}. Last Name: ${data.lastName}. Email: ${data.email}. Phone: ${data.phone}. Company: ${data.company}. Project: ${data.project}.</p>`, // required
                  Charset: "UTF-8",
                },
              },
            }
          };
          const command = new SendEmailCommand(input);
          const response = await client.send(command);
          return response.MessageId;
        };
      MemorySize: 512
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonSESFullAccess
        # - AWSLambdaVPCAccessExecutionRole
        # - AmazonS3ReadOnlyAccess
      Runtime: nodejs20.x
      Timeout: 30
      # VpcConfig:
      #   SecurityGroupIds: 
      #     - !ImportValue ApiSecurityGroupId
      #   SubnetIds: 
      #     - !ImportValue ApiSubnetAId
